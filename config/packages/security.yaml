security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
          { memory: null }

        app_user_provider:
           entity:
              class: App\Entity\User
              # property: email # Utiliser 'email' comme propriété d'identification
              property: email #username #_username #name # Utiliser 'email' comme propriété d'identification



    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider #users_in_memory #app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #access_control:
        # require ROLE_ADMIN for /admin*
        #- { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/registrer$, roles: ROLE_USER }
        #- { path: ^/admin, roles: ROLE_ADMIN }
       # - { path: ^/, roles: PUBLIC_ACCESS }
            #- { path: ^/profile, roles: ROLE_USER }

        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
        #- { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

        # the 'path' value can be any valid regular expression
        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
        #- { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

#MC : ajout de ce listerner pour captuer mes erreurs de login
services:
    App\EventListener\AuthenticationFailureListener:
        arguments:
            $logger: '@logger'
        tags:
            - { name: 'kernel.event_listener', event: 'security.authentication.failure' }